// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Family {
  id        String  @id @default(uuid())
  name      String  
  budget    Budget[]
  users     User[]
}

model Budget {
  id          String     @id @default(uuid())
  month       DateTime
  amount      Float
  familyID    String
  family      Family     @relation(fields: [familyID], references: [id])
 }


model User {
  id        String   @id @default(uuid())
  email     String   @unique 
  username  String   @unique 
  password  String
  familyID  String  
  role      Role     @default(USER)
  pocketMoney PocketMoney[]
  incomeOutcome  IncomeOutcome[]
  savingGoal   SavingGoal[]
  family    Family?  @relation(fields: [familyID], references: [id])
  task    Task[]
  resetToken       String?         @unique
  resetTokenExpiry DateTime?
}

 model PocketMoney {
  id         String     @id @default(uuid())
  amount     Float
  month      DateTime
  userId     String
  user       User       @relation(fields: [userId], references: [id])
}

model IncomeOutcome {
  id         String     @id @default(uuid())
  category_type   String
  category   String
  saving_goal_Id    String?
  start_date DateTime
  description String
  amount     Float
  userId     String
  user       User       @relation(fields: [userId], references: [id])
} 

model SavingGoal {
  id         String     @id @default(uuid())
  name String
  description String
  goalAmount     Float
  currentAmount     Float
  userId     String
  start_date    DateTime
  end_date      DateTime?
  isActive    Boolean
  status GoalStatus? @default(PENDING)
  user       User       @relation(fields: [userId], references: [id])

}

model Task {
  id         String     @id @default(uuid())
  name String
  description String
  userId     String
  amount     Float
  start_date    DateTime?
  end_date      DateTime?
  isActive    Boolean?
  status     TaskStatus  @default(PENDING)
  feedback   String?
  user       User       @relation(fields: [userId], references: [id])

}

enum TaskStatus {
  PENDING    // Task is assigned but not yet started or completed by the user.
  ON_REVIEW  // User has completed the task and is waiting for admin review.
  APPROVED   
  DECLINED    
}

enum GoalStatus {
  PENDING
  COMPLETED
  CLOSED //UNCOMPLETED, CLOSED BY USER 
}

enum Role {
  ADMIN
  USER
}


